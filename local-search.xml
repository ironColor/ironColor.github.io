<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>跨域</title>
    <link href="/2021/05/03/%E8%B7%A8%E5%9F%9F/"/>
    <url>/2021/05/03/%E8%B7%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在度过了忙碌的四月之后，终于有时间来写写博客了。</p><span id="more"></span></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p><strong>URL构成</strong>：[协议名]://[域名]:[端口号]/[请求资源地址]</p><p><strong>同源</strong>：当两个url的协议、域名、端口都相同时，则表示同源。</p><p><strong>不同源</strong>：协议、域名、端口三者中任一不相同，则为不同源。</p><p><strong>同源策略(SOP: Same-Origin Policy)</strong>：浏览器中核心的安全功能，用来限制某个源内的文档或脚本与另一源内的资源进行交互，减少潜在的攻击。</p><p><strong>跨域</strong>：不同源之间相互请求资源，则产生跨域。所带来的限制：请求结果被拦截、Cookie、LocalStorage无法读取、DOM无法获得。</p><h1 id="解决方案-JSONP"><a href="#解决方案-JSONP" class="headerlink" title="解决方案-JSONP"></a>解决方案-JSONP</h1><p>JSONP(JSON with Padding)貌似是最早的跨域解决方案，现在前端工程化的情况下，这个方案用的不多了。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><strong>利用 <code>&lt;script&gt;</code> 标签没有跨域限制（link、img、frame标签也没有限制）的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</strong></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ol><li>创建业务处理的函数，该函数名会传递给服务器端，服务器返回的数据（可作为该函数的形参）是实际所需要处理的。</li><li>创建script标签，将script标签的src属性声明为对应的服务器端API地址，同时还需要向服务器传递该函数名。</li><li>服务器接收到请求后，完成相应的业务处理后，且将需要的数据放到回调参数上返回出给客户端。</li></ol><p>这其实就相当于后端返回一个callback(‘asss’)，前端直接将执行该函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html">index.html<br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span> <br><span class="javascript">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleSomething</span>(<span class="hljs-params">data</span>) </span>&#123;</span><br><span class="javascript">    <span class="hljs-comment">// 业务处理....</span></span><br><span class="javascript">    <span class="hljs-built_in">console</span>.log(data)</span><br>  &#125; <br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> </span><br><span class="hljs-tag">  <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://127.0.0.1:8081/jsonp?callback=handleSomething&quot;</span></span><br><span class="hljs-tag">&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript">server.js<br><br><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>)<br><br><span class="hljs-keyword">const</span> app = express()<br><br>app.get(<span class="hljs-string">&#x27;/jsonp&#x27;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> &#123; callback &#125; = req.query<br>    <span class="hljs-comment">// 业务处理后 返回数据</span><br>    res.send(<span class="hljs-string">`<span class="hljs-subst">$&#123;callback&#125;</span>(&#x27;<span class="hljs-subst">$&#123;<span class="hljs-built_in">JSON</span>.stringify(&#123;</span></span><br><span class="hljs-string"><span class="hljs-subst">        success: <span class="hljs-number">1</span>,</span></span><br><span class="hljs-string"><span class="hljs-subst">        data: &#123;</span></span><br><span class="hljs-string"><span class="hljs-subst">            price: <span class="hljs-number">233</span>,</span></span><br><span class="hljs-string"><span class="hljs-subst">            type: <span class="hljs-string">&#x27;g&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-subst">        &#125;</span></span><br><span class="hljs-string"><span class="hljs-subst">    &#125;)&#125;</span>&#x27;)`</span>)<br>&#125;)<br><br>app.listen(<span class="hljs-number">8081</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;web server of JSONP is listening to the port 8081&#x27;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>JSONP的兼容性好，能够解决跨域的数据访问问题，但是只支持get方法，并且不够灵活。</p><h1 id="解决方案-devServer-proxy"><a href="#解决方案-devServer-proxy" class="headerlink" title="解决方案-devServer.proxy"></a>解决方案-devServer.proxy</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>devServer是webpack的核心之一，可以在devServer中配置热更新、请求代理。</p><p>浏览器因为同源策略，所以有跨域的限制，而服务器上没有跨域的限制，而通过一个代理服务器将我们的请求转发就可以避免跨域的问题。这个方法也是限制Vue项目在开发环境中使用最多的解决方案（proxy大法确实顶）。</p><p><img src="image-20210504235229645.png" alt="image-20210504235229645"></p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><p>vue项目通过配置vue.config.js文件，来设置代理服务器转发的地址，在设置代理转发时要将changeOrigin设置为true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">module</span>.exports = &#123;<br>    lintOnSave: <span class="hljs-literal">false</span>,<br>    devServer: &#123;<br>        proxy: &#123;<br>            <span class="hljs-string">&#x27;/&#x27;</span>: &#123;<br>                target: <span class="hljs-string">&#x27;http://127.0.0.1:8888&#x27;</span>,<br>                changeOrigin: <span class="hljs-literal">true</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="解决方案-Nginx"><a href="#解决方案-Nginx" class="headerlink" title="解决方案-Nginx"></a>解决方案-Nginx</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>其实Nginx方向代理解决跨域问题和devServer.proxy的原理一样，同样使用的是服务器之间没有同源策略的限制</p><p>主要Nginx一般用在生成环境中（我司现在的项目，所部署时就是用Nginx进行一次反向代理，解决跨域问题）</p><h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"># Nginx代理服务器<br>server &#123;<br>  listen       80;<br>  server_name  www.pre.com;<br><br>  location / &#123;<br>    # 反向代理地址<br>    proxy_pass   http://www.next.com:81;  <br>    # 修改Cookie中域名<br>    proxy_cookie_domain www.next.com www.pre.com; <br>    index  index.html index.htm;<br><br>    # 前端跨域携带了Cookie，所以Allow-Origin配置不可为*<br>    add_header Access-Control-Allow-Origin http://www.hahaha.com;  <br>    add_header Access-Control-Allow-Credentials true;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>其实解决跨域还有很多方法，比如CORS、node代理跨域、WebSocket等，其实核心原因就是浏览器的同源策略，这些方法都是围绕这个原因从不同方面解决问题，而这次主要记录以下自己接触过的解决跨域的方案，后续其他方案，回头在研究研究。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>大文件上传</title>
    <link href="/2021/03/14/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2021/03/14/%E5%A4%A7%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在我司最近的业务需求中，需要解决大文件上传速度过慢的问题，最终的思路是将大文件进行分片上传。</p><span id="more"></span></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    这个大文件上传，从最开始实现最简单的分片上传，到后续不断查阅资料进行完善，经历了不少变更。</p><p>​    大文件上传的主要思路是：计算文件的hash值 -&gt; 将文件切片 -&gt; 将切分发送给后端 -&gt; 发送完毕后，通知后端合并文件</p><p>​    涉及到的知识点：</p><p>​        1.文件切片</p><p>​        2.web-worker</p><p>​        3.MD5计算hash</p><p>​        4.axios并发</p><p>​        5.请求报错与重试</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>​    后端存储文件一般都是使用前端传过去的文件名，但是这样会导致一个问题，不同的文件可以拥有相同的文件名，这样就会导致文件出现覆盖，不是我们想要的效果。</p><p>​    利用spark-md5可以计算文件的hash值，不同的文件会用不同的hash值，因此用hash作为文件的存储是可以避免上述的情况。<font color='red'>需注意spark-md5会根据所有切片才能算出一个hash值。</font></p><p>​    文件的切片主要使用到的核心API是Blob.prototype.slice</p><p>​    代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">changeFile</span>(<span class="hljs-params">e</span>)</span> &#123;<br>           <span class="hljs-keyword">if</span> (!e) <span class="hljs-keyword">return</span><br>           <span class="hljs-keyword">const</span> file  = e.raw<br>           <span class="hljs-comment">// 获取文件加密后的hash值</span><br>           <span class="hljs-keyword">const</span> hash = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.createFileMd5(file)<br>           <span class="hljs-comment">// 创建文件切片</span><br>           <span class="hljs-keyword">const</span> chunkList = <span class="hljs-built_in">this</span>.createFileChunks(file)<br>           <span class="hljs-comment">// 获取文件后缀</span><br>           <span class="hljs-keyword">const</span> suffix = <span class="hljs-regexp">/\.([0-9a-zA-Z]+)$/i</span>.exec(file.name)[<span class="hljs-number">1</span>]<br>           <span class="hljs-comment">// 对chunks添加一些自定义属性</span><br>           <span class="hljs-keyword">const</span> chunks = chunkList.map(<span class="hljs-function">(<span class="hljs-params">chunk, index</span>) =&gt;</span> &#123;<br>               <span class="hljs-keyword">const</span> filename =  <span class="hljs-string">`<span class="hljs-subst">$&#123;hash&#125;</span>_<span class="hljs-subst">$&#123;index&#125;</span>.<span class="hljs-subst">$&#123;suffix&#125;</span>`</span><br>               <span class="hljs-keyword">return</span> &#123;<br>                   filename,<br>                   index: index,<br>                   hash: hash,<br>                   chunk: chunk.fileChunk<br>               &#125;<br>           &#125;)<br>           <span class="hljs-comment">// 创建切片发送列表</span><br>           <span class="hljs-keyword">let</span> req = <span class="hljs-built_in">this</span>.createSendRequestList(chunks)<br>           <span class="hljs-comment">// 发送切片</span><br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;  i &lt; req.length; i++) &#123;<br>               <span class="hljs-keyword">await</span> req[i]()<br>           &#125;<br>           <span class="hljs-comment">// 发送合并请求</span><br>           axios.get(<span class="hljs-string">&quot;/merge&quot;</span>, &#123; <span class="hljs-attr">params</span>: &#123; hash &#125;, &#125;);<br>       &#125;<br></code></pre></td></tr></table></figure><p>创建文件MD5代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">createFileMd5</span>(<span class="hljs-params">file</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>                <span class="hljs-comment">// 创建FileReader实例</span><br>                <span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br>                fileReader.readAsArrayBuffer(file)<br>                <span class="hljs-comment">// 文件读取完成后，触发load事</span><br>                fileReader.onload = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">const</span> result = e.target.result<br>                    <span class="hljs-keyword">const</span> spark = <span class="hljs-keyword">new</span> SparkMD5.ArrayBuffer()<br>                    spark.append(result)<br>                    <span class="hljs-comment">// 判断读到的长度和文件的长度是否一致</span><br>                    <span class="hljs-keyword">const</span> isSuccess = result.byteLength === file.size<br>                    isSuccess <br>                        ? resolve(spark.end())<br>                        : reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;读取出错&#x27;</span>))<br>                &#125;<br>                fileReader.onerror = <span class="hljs-function">() =&gt;</span> reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&#x27;读取出错&#x27;</span>))<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p>文件切片代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">createFileChunks</span>(<span class="hljs-params">file</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> CHUNK_SIZE = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>            <span class="hljs-keyword">let</span> cur = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">const</span> chunk = []<br>            <span class="hljs-keyword">while</span> (cur &lt; file.size) &#123;<br>                chunk.push(&#123;<br>                    fileChunk: file.slice(cur, cur + CHUNK_SIZE)<br>                &#125;)<br>                cur += CHUNK_SIZE<br>            &#125;<br>            <span class="hljs-keyword">return</span> chunk<br>        &#125;<br></code></pre></td></tr></table></figure><p>创建文件切片发送序列代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">createSendRequestList</span>(<span class="hljs-params">chunks</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> requestList = chunks.map(<span class="hljs-function">(<span class="hljs-params">&#123; filename,chunk &#125;</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()<br>                formData.append(<span class="hljs-string">&#x27;filename&#x27;</span>, filename)<br>                formData.append(<span class="hljs-string">&#x27;chunk&#x27;</span>, chunk)<br>                <span class="hljs-keyword">return</span> axios.post(<span class="hljs-string">&#x27;/single3&#x27;</span>, formData)<br>            &#125;)<br>            <span class="hljs-keyword">return</span> requestList<br>        &#125;<br></code></pre></td></tr></table></figure><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>上述的代码确实实现了将大文件分割成多个片后，上传到后端。但在实际使用以及和大佬交谈后，发现还是有很多地方需要改进。</p><ol><li>上述代码中是直接将整个文件在页面中进行MD5加密，而当文件规模越大，加密时间越长，会阻塞 UI 渲染。该如何优化？</li><li>已经对文件进行了hash加密，能否做到秒传？断点续传？</li><li>能否增加暂停/恢复按钮？</li><li>能否对切片请求进行并发，而不是串行发送？并发能否能控制上传数量，避免一次性请求过多导致浏览器卡死？</li><li>上述代码没有考虑发送失败的情况，能否对发送失败的情况进行重传？</li><li>能否增加文件上传进度?</li></ol><p>为了防止计算过程带来各种问题，可以用**<a href="http://www.ruanyifeng.com/blog/2018/07/web-worker.html">Web Worker</a><strong>开启线程进行计算，也可以使用</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback">window.requestIdleCallback()</a>**让浏览器在空闲的时候执行计算任务（但是根据MDN文档中所示，该功能尚在开发，不是所有的浏览器都支持）。所以可以选择Web Worker进行计算，避免挂起主进程。</p><p>文件秒传，主要依赖于文件加密后生成的hash值。可以每次上传文件前将文件的hash值发送给后端，后端根据hash值返回两个字段isUpload，uploadList。<strong>isUpload为true表示该文件已存在，isUpload为false则表示该文件未上传完毕，uploadList会返回该文件已经上传的切片名列表。</strong></p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>用Web Worker开启线程计算文件hash值，需要注意的是Worker实例化时，接收一个脚本文件作为参数，为了避免跨域，需要在public目录下单独创建生成hash值的createHash.js文件放到 public 目录下。</p><p><img src="image-20210325113937077.png" alt="image-20210325113937077"></p><p>上传的整体思路：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">changeFile</span>(<span class="hljs-params">e</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> file = e.raw<br>            <span class="hljs-comment">// 创建文件切片</span><br>            <span class="hljs-keyword">const</span> fileChunks = <span class="hljs-built_in">this</span>.createFileChunks(file)<br>            <span class="hljs-comment">// 获取md5加密后的hash值</span><br>            <span class="hljs-keyword">const</span> &#123; hash &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.calculateHashByWorker(fileChunks)<br>            <span class="hljs-comment">// 验证文件是否上传</span><br>            <span class="hljs-keyword">const</span> &#123; isUpload, uploadedList &#125; = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.checkUploadFile(file.name, hash)<br>            <span class="hljs-comment">// 服务器已有该文件</span><br>            <span class="hljs-keyword">if</span> (isUpload) &#123;<br>                <span class="hljs-built_in">this</span>.$message(&#123;<br>                    message: <span class="hljs-string">&#x27;文件上传成功&#x27;</span>,<br>                    type: <span class="hljs-string">&#x27;success&#x27;</span><br>                &#125;)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>            &#125;<br>            <span class="hljs-comment">// 文件切片中添加属性</span><br>            <span class="hljs-keyword">const</span> suffix = <span class="hljs-regexp">/\.([0-9a-zA-Z]+)$/i</span>.exec(file.name)[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">const</span> chunks = fileChunks.map(<span class="hljs-function">(<span class="hljs-params">chunk, index</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> chunkName =  <span class="hljs-string">`<span class="hljs-subst">$&#123;hash&#125;</span>_<span class="hljs-subst">$&#123;index&#125;</span>.<span class="hljs-subst">$&#123;suffix&#125;</span>`</span><br>                <span class="hljs-keyword">return</span> &#123;<br>                    chunkName,<br>                    index: index,<br>                    hash: hash,<br>                    chunk: chunk.fileChunk<br>                &#125;<br>            &#125;)<br>            <span class="hljs-comment">// 上传未上传过的切片</span><br>            <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.uploadChunks(uploadedList, chunks)<br>            <span class="hljs-comment">// 全部上传成功则合并切片</span><br>            axios.get(<span class="hljs-string">&quot;/merge&quot;</span>, &#123; <span class="hljs-attr">params</span>: &#123; hash &#125; &#125;).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">if</span> (res.data.code === <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-built_in">this</span>.$message(&#123;<br>                        message: <span class="hljs-string">&#x27;文件上传成功&#x27;</span>,<br>                        type: <span class="hljs-string">&#x27;success&#x27;</span><br>                    &#125;)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-built_in">this</span>.$message(&#123;<br>                        message: <span class="hljs-string">&#x27;文件上传失败&#x27;</span>,<br>                        type: <span class="hljs-string">&#x27;error&#x27;</span><br>                    &#125;)<br>                &#125;<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p>创建切片的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">createFileChunks</span>(<span class="hljs-params">file</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> CHUNK_SIZE = <span class="hljs-number">1</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>            <span class="hljs-keyword">let</span> cur = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">const</span> chunk = []<br>            <span class="hljs-keyword">while</span> (cur &lt; file.size) &#123;<br>                chunk.push(&#123;<br>                    fileChunk: file.slice(cur, cur + CHUNK_SIZE)<br>                &#125;)<br>                cur += CHUNK_SIZE<br>            &#125;<br>            <span class="hljs-keyword">return</span> chunk<br>        &#125;<br></code></pre></td></tr></table></figure><p>线程计算md5值的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">calculateHashByWorker</span>(<span class="hljs-params">fileChunks</span>)</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">&#x27;/createHash.js&#x27;</span>)<br>                worker.postMessage(&#123; fileChunks &#125;)<br>                worker.onmessage = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>                    <span class="hljs-keyword">const</span> &#123; percentage, hash &#125; = e.data<br>                    hash &amp;&amp; resolve(&#123; hash, percentage &#125;)<br>                &#125;<br>            &#125;)<br>        &#125;<br></code></pre></td></tr></table></figure><p>线程代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript">self.importScripts(<span class="hljs-string">&#x27;/spark-md5.min.js&#x27;</span>)<br><br>self.onmessage = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> &#123; fileChunks &#125; = e.data<br>    <span class="hljs-keyword">const</span> spark = <span class="hljs-keyword">new</span> self.SparkMD5.ArrayBuffer()<br>    <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">let</span> percentage = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">const</span> loadNext = <span class="hljs-function"><span class="hljs-params">index</span> =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> fileReader = <span class="hljs-keyword">new</span> FileReader()<br>        fileReader.readAsArrayBuffer(fileChunks[index].fileChunk)<br>        fileReader.onload = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>            count++<br>            spark.append(e.target.result)<br>            <span class="hljs-keyword">if</span> (count === fileChunks.length) &#123;<br>                <span class="hljs-comment">// spark增量读取数据完毕后，往主线程发送消息</span><br>                self.postMessage(&#123;<br>                    percentage: <span class="hljs-number">100</span>,<br>                    hash: spark.end()<br>                &#125;)<br>                self.close()<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 未读取完毕 则向主线程发送读取进度</span><br>                percentage += <span class="hljs-number">100</span>/fileChunks.length<br>                self.postMessage(&#123;<br>                    percentage<br>                &#125;)<br>                loadNext(count)<br>            &#125;<br>        &#125;<br>    &#125;<br>    loadNext(<span class="hljs-number">0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>检测切片&amp;上传切片</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">checkUploadFile</span>(<span class="hljs-params">filename, hash</span>)</span> &#123;<br>            <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: &#123;data&#125; &#125; = <span class="hljs-keyword">await</span> axios.get(<span class="hljs-string">&#x27;/check&#x27;</span>, &#123;<span class="hljs-attr">params</span>: &#123; filename, hash &#125;&#125;)<br>            <span class="hljs-keyword">return</span> data<br>        &#125;,<br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">uploadChunks</span>(<span class="hljs-params">uploadedList = [], fileChunks</span>)</span> &#123;<br>            <span class="hljs-comment">// 用切片名进行过滤出 未上传的切片</span><br>            <span class="hljs-keyword">const</span> requestList = fileChunks.filter( <span class="hljs-function"><span class="hljs-params">chunk</span> =&gt;</span>  !uploadedList.includes(chunk.chunkName))<br>                .map(<span class="hljs-function">(<span class="hljs-params"> &#123;chunkName, chunk, index&#125; </span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">const</span> formData = <span class="hljs-keyword">new</span> FormData()<br>                formData.append(<span class="hljs-string">&#x27;chunk&#x27;</span>, chunk)<br>                formData.append(<span class="hljs-string">&#x27;filename&#x27;</span>, chunkName)<br>                <span class="hljs-keyword">return</span> &#123;<br>                    formData,<br>                    index,<br>                    status: <span class="hljs-number">0</span>, <span class="hljs-comment">// 切片上传状态 0 等待上传 1 上传失败 2 上传中 3 上传成功</span><br>                    tryNum: <span class="hljs-number">0</span> <span class="hljs-comment">// 切片重试次数</span><br>                &#125;<br>            &#125;)<br>            <span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span> <span class="hljs-comment">// 上传成功的切片数</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; requestList.length; i++) &#123;<br>                <span class="hljs-comment">// 限制并发数</span><br>                <span class="hljs-keyword">let</span> sendLimit = <span class="hljs-number">4</span>   <br>                <span class="hljs-keyword">while</span>(sendLimit &gt; <span class="hljs-number">0</span>) &#123;<br>                    sendLimit--<br>                    <span class="hljs-comment">// 等待上传或者失败且重试次数少于3次的切片</span><br>                    <span class="hljs-keyword">const</span> data = requestList.find( <span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>                        <span class="hljs-keyword">return</span> item.status === <span class="hljs-number">0</span> || (item.status === <span class="hljs-number">1</span> &amp;&amp; item.tryNum &lt;= <span class="hljs-number">2</span>)<br>                    &#125;)<br>                     <span class="hljs-comment">// 未找到需要上传的切片 但此时可能还有并发切块</span><br>                    <span class="hljs-keyword">if</span> (!data) <span class="hljs-keyword">continue</span><br>                    <span class="hljs-comment">// 修改切片状态为正在上传</span><br>                    data.status = <span class="hljs-number">2</span> <br>                    <span class="hljs-keyword">const</span> formData = data.formData<br>                    <span class="hljs-keyword">await</span> axios.post(<span class="hljs-string">&#x27;/single3&#x27;</span>, formData).then(<span class="hljs-function">(<span class="hljs-params">&#123; res &#125;</span>) =&gt;</span> &#123;<br>                        sendLimit++<br>                        count++<br>                        data.status = <span class="hljs-number">3</span> <span class="hljs-comment">//修改该切片状态</span><br>                    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>                        sendLimit++ <span class="hljs-comment">// 上传失败 亦增加并发数量</span><br>                        data.status = <span class="hljs-number">1</span><br>                        data.tryNum++<br>                    &#125;)<br>                &#125;<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>至此，已经能够解决线程计算MD5、并发发送切片&amp;控制并发数量、错误重传、秒传&amp;断点续传。</p><p>至于暂停功能，思路上可以利用axios的abort方法，取消上传的请求，而恢复则可以再次通过先请求uploadList然后在上传切片列表来实现。文件上传记录则只需用一个变量记录切片发送成功的数量即可。</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>  从最开始的只是实现一个文件的切片上传，到后面不断的优化。在这一过程中不仅能够学习到许多知识，也能够更加全面的去了解大文件上传这一块。深入的了解，总比走马观花的浏览，更能有所收获</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.cn/post/6870837414852886542#heading-4">前端大文件上传深入研究和实现</a></p><p><a href="https://juejin.cn/post/6877072128135561223#heading-0">怎么给文件生成MD5</a></p><p><a href="https://juejin.cn/post/6919690643136577550#heading-0">文件上传那些事儿</a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件切片</tag>
      
      <tag>web-worker</tag>
      
      <tag>MD5</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于VUE的动态权限</title>
    <link href="/2021/03/08/%E5%9F%BA%E4%BA%8EVUE%E7%9A%84%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
    <url>/2021/03/08/%E5%9F%BA%E4%BA%8EVUE%E7%9A%84%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p> 我司的业务需求中，每个角色所拥有的权限是可以灵活配置修改的，系统的角色数量在上线后也是可以修改的。经过讨论以及考虑到实际的开发情况，决定由前端来主导动态权限，而后端只返回未处理的路由数据。 </p><span id="more"></span><p>参考资料 <a href="https://juejin.cn/post/6844903478880370701#heading-4">手摸手，带你用vue撸后台 系列二(登录权限篇)</a>  –by 花裤衩</p></blockquote><h1 id="前言-amp-概念"><a href="#前言-amp-概念" class="headerlink" title="前言&amp;概念"></a>前言&amp;概念</h1><p>​    首先，需要明确的是权限在前端意味着什么：权限在前端给予用户的就是菜单栏的可视化，用户是否有权进入某个页面，也可以说是url的变化。当然，如果颗粒度如果要更细的情况下，还可以做到按钮级的权限控制，而本文主要介绍的是页面级的权限控制。</p><p>​    <strong>前端主导的动态权限难点在于：何时生成路由树、后端存储的数据格式 、如何递归生成对应的路由书、 路由树筛选</strong></p><p>​    为了方便阅读和节省时间，现说明相关名词：</p><p>​    路由树即vue-router中的路由数组。</p><p>​    路由数据是后端返回的存储在路由表中的一项项数据，这些数据记录的是路由树中每一项的基础信息，包括title、图标、允许访问的角色等信息。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="生成路由树的时间"><a href="#生成路由树的时间" class="headerlink" title="生成路由树的时间"></a>生成路由树的时间</h2><p>​    首先，能够想到的就是在用户登录成功后需要生成对应的路由树，同时进一步考虑当用户想在路由中输入不属于该角色的url时该如何拦截、是不是所有的路径都需要拦截。</p><p>​    这里需要用到vue-router的beforeEach导航守卫，在每次的路由跳转的时候进行业务处理。</p><p>​    talk is cheap, show you the code</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> whiteList = [<span class="hljs-string">&#x27;/login&#x27;</span>] <span class="hljs-comment">// 白名单 无需跳转判断</span><br><span class="hljs-comment">// main.js</span><br>router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (store.getters.token) &#123; <span class="hljs-comment">// 判断是否有token</span><br>    <span class="hljs-keyword">if</span> (to.path === <span class="hljs-string">&#x27;/login&#x27;</span>) &#123;<br>      next(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span> &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">if</span> (store.getters.roles.length === <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 判断当前用户是否已拉取完user_info信息</span><br>        <span class="hljs-keyword">const</span> roles = <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;user/getInfo&#x27;</span>) <span class="hljs-comment">// 此处是获取用户的身份信息如角色等</span><br>        <span class="hljs-keyword">await</span> store.dispatch(<span class="hljs-string">&#x27;permission/generateRoutes&#x27;</span>, roles)<br>        next(&#123; ...to, <span class="hljs-attr">replace</span>: <span class="hljs-literal">true</span> &#125;)<br>        &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>          <span class="hljs-built_in">console</span>.log(err);<br>        &#125;);<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        next() <span class="hljs-comment">//当有用户权限的时候，说明所有可访问路由已生成 如访问没权限的全面会自动进入404页面</span><br>      &#125;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> (whiteList.indexOf(to.path) !== -<span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 在免登录白名单，直接进入</span><br>      next();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      next(<span class="hljs-string">&#x27;/login&#x27;</span>); <span class="hljs-comment">// 否则全部重定向到登录页</span><br>    &#125;<br>  &#125;<br>&#125;);<br><br></code></pre></td></tr></table></figure><p>上述的代码主要借鉴花裤衩大佬的思路，我司的业务中也是用token作为唯一凭证，当用户登录成功后，后端会返回token作为标识。</p><p>而我司前端业务控制权限的实现中，主要在store.dispatch(‘permission/generateRoutes’, roles)中完成。</p><h2 id="后端存储的数据格式"><a href="#后端存储的数据格式" class="headerlink" title="后端存储的数据格式"></a>后端存储的数据格式</h2><p>与后端同事沟通后，决定让后端返回路由数组，对路由数组不进行处理，由前端对这些路由数据进行递归生成路由树，其数据结构如下:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">[<br>&#123;<br>id: 1,<br>roles: [],<br>title: &#x27;&#x27;,<br>path: &#x27;&#x27;,<br>component: &#x27;&#x27;,<br>disable: ,<br>hidden: ,<br>icon: &quot;&quot;,<br>name: &quot;&quot;,<br>pid: <br>&#125;<br>]<br></code></pre></td></tr></table></figure><p>里面的数据可以根据实际业务需求添加，其实这些数据对应的就是数据库中路由表的每一行。</p><h2 id="递归生成对应的路由书"><a href="#递归生成对应的路由书" class="headerlink" title="递归生成对应的路由书"></a>递归生成对应的路由书</h2><p>拿到数据后，进行遍历处理，首先处理pid为null的数据，pid为null意味着是根节点，在菜单上显示即为一级菜单</p><p>遍历代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> menuRouters = [] <span class="hljs-comment">// 定义一个空数组，这个是用来装真正路由数据的</span><br><br>menuList.forEach(<span class="hljs-function">(<span class="hljs-params">m, i</span>) =&gt;</span> &#123;<br>    <br>  <span class="hljs-keyword">if</span> (m.pid === <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 根节点</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">module</span> = &#123;<br>      path: m.path,<br>      component: Layout,<br>      redirect: m.redirect,<br>      name: m.name,<br>      meta: &#123; <span class="hljs-attr">id</span>: m.id, <span class="hljs-attr">title</span>: m.title, <span class="hljs-attr">icon</span>: m.icon, <span class="hljs-attr">roles</span>: m.roles, <span class="hljs-attr">disable</span>: m.disable &#125;, <br>      children: []<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span> (m.hidden !== <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// hidden用于控制该项菜单是否显示在侧边栏</span><br>      <span class="hljs-built_in">module</span>.hidden = m.hidden<br>    &#125;<br>      <br>    <span class="hljs-keyword">if</span> (m.alwaysShow !== <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// alwaysShow如果设置为true则始终显示根菜单</span><br>      <span class="hljs-built_in">module</span>.alwaysShow = m.alwaysShow<br>    &#125;<br>      <br>    menuRouters.push(<span class="hljs-built_in">module</span>)<br>  &#125;<br>&#125;)<br>convertTree(menuRouters, menuList)  <span class="hljs-comment">// 递归遍历后台返回的路由菜单</span><br>menuRouters.push(&#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/404&#x27;</span>, <span class="hljs-attr">hidden</span>: <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">// 最后添加404</span><br><span class="hljs-keyword">const</span> accessedRoutes = filterAsyncRoutes(menuRouters, roles)<br>router.addRoutes(accessedRoutes)<br>router.options.routes = constantRoutes.concat(accessedRoutes)<br><br></code></pre></td></tr></table></figure><p>在第一次遍历完数据后，找到所有pid为null的根节点，生成根节点路由数组，然后在根据根节点路由数组与路由数据递归生成整个路由树，即上述代码中convertTree函数的功能</p><p>convertTree函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归遍历后台返回的路由菜单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">routers</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;*&#125;</span> <span class="hljs-variable">menuList</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">convertTree</span>(<span class="hljs-params">routers, menuList</span>) </span>&#123;<br>  routers.forEach(<span class="hljs-function"><span class="hljs-params">r</span> =&gt;</span> &#123;<br>    menuList.forEach(<span class="hljs-function">(<span class="hljs-params">m, i</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (m.pid &amp;&amp; m.pid === r.meta.id) &#123; <span class="hljs-comment">// 两次循环 </span><br>        <span class="hljs-keyword">if</span> (!r.children) r.children = [] <span class="hljs-comment">// 若根节点没有子节点 则添加子节点数组</span><br>        <span class="hljs-keyword">const</span> menu = &#123;<br>          path: m.path,<br>          name: m.name,<br>          component: <span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123; <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;@/views/&#x27;</span> + m.component], resolve) &#125;, <span class="hljs-comment">// 引入子节点组件</span><br>          meta: &#123; <span class="hljs-attr">id</span>: m.id, <span class="hljs-attr">title</span>: m.title, <span class="hljs-attr">icon</span>: m.icon, <span class="hljs-attr">roles</span>: m.roles, <span class="hljs-attr">keepAlive</span>: m.noCache, <span class="hljs-attr">disable</span>: m.disable &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m.hidden !== <span class="hljs-literal">null</span>) &#123;<br>          menu.hidden = m.hidden<br>        &#125;<br>        <span class="hljs-keyword">if</span> (m.alwaysShow !== <span class="hljs-literal">null</span>) &#123;<br>          menu.alwaysShow = m.alwaysShow<br>        &#125;<br>        r.children.push(menu)<br>      &#125;<br>    &#125;)<br>    <span class="hljs-keyword">if</span> (r.children) convertTree(r.children, menuList) <span class="hljs-comment">//若子节点还有孩子节点 则继续递归</span><br>  &#125;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="路由树筛选"><a href="#路由树筛选" class="headerlink" title="路由树筛选"></a>路由树筛选</h2><p>当convertTree函数递归完毕后，就已近将后端返回的所有路由数据生成了路由树，接下来则需要对生成的路由树中安装角色进行进行过滤</p><p>即遍历代码中filterAsyncRoutes函数实现的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归过滤异步路由表，返回符合用户角色权限的路由表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>routes 需过滤的路由表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param </span>role 用户角色</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filterAsyncRoutes</span>(<span class="hljs-params">routes, roles</span>) </span>&#123;<br>  <span class="hljs-keyword">const</span> res = []<br>  routes.forEach(<span class="hljs-function"><span class="hljs-params">route</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> tmp = &#123; ...route &#125;<br>    <span class="hljs-keyword">if</span> (hasPermission(roles, tmp)) &#123;<br>      <span class="hljs-keyword">if</span> (tmp.children) &#123;<br>        tmp.children = filterAsyncRoutes(tmp.children, roles) <span class="hljs-comment">// 若有子节点 则继续递归判</span><br>      &#125;<br>      res.push(tmp)<br>    &#125;<br>  &#125;)<br>  <span class="hljs-keyword">return</span> res<br>&#125;<br><br></code></pre></td></tr></table></figure><p>hasPermission函数主要是用于判断某项路由是否拥有对应的用户角色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过meta.role判断是否与当前用户权限匹配</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Array&#125;</span> <span class="hljs-variable">role</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param <span class="hljs-type">&#123;Object&#125;</span> <span class="hljs-variable">route</span></span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return <span class="hljs-type">&#123;boolean&#125;</span></span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hasPermission</span>(<span class="hljs-params">roles, route</span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (route.meta &amp;&amp; route.meta.roles) &#123;<br>    <span class="hljs-keyword">return</span> roles.some(<span class="hljs-function"><span class="hljs-params">role</span> =&gt;</span> route.meta.roles.includes(role)) <span class="hljs-comment">// 判断该级路由是否包含用户的角色</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 该级路由没有roles属性或meta属性 表明该级路由不需要权限</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>当路由树过滤完毕后，使用vue-router中的addRoutes函数将过滤后的路由树添加到路由数组中，</p><p>注意 最后还需要router.options.routes = constantRoutes.concat(accessedRoutes) 将动态筛选后的路由与白名单路由结合后赋值给router 才能生效</p><h1 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h1><p>​    这个需求是进入我司后负责的第一个需求，本来弄成word在组内分享完毕后一直放在电脑上，最近才发现放在本地十分不便。在想想作为一个程序员连自己的博客都没，十分不好意思，最后就将这篇文章整理后上传到自己的博客上吧。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>动态权限</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
